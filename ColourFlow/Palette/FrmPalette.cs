using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Microsoft.VisualBasic;

namespace ColourFlow
{
    public partial class FrmPalette : Form
    {

        Classes.Palette Palette = new Classes.Palette(); //Palette class used for the default palettes

        Flow.Declarations.Palette Current = new Flow.Declarations.Palette(); //Current is used to store the palette while it's being created. This is passed into the save routine.

        string ID = Properties.Settings.Default.Palette; //Used when setting the default Palette

        Label[] Change = new Label[6]; //The Colour changing labels

        public FrmPalette()
        {
            InitializeComponent();
        }

        #region Form Events
        //Contains the main events generated by the form.

        private void FrmPalette_FormClosing(object sender, EventArgs e)
        {
            Properties.Settings.Default.Save(); //Saving the settings of the Game
            //Makes the Main form visible again
            Form Main = new Form1();
            Main.Visible = true;
        }

        private void FrmPalette_Load(object sender, EventArgs e)
        {
            Palette.Setup(); //Adds the default palettes to variable that can be used to load if the user requests it
            Add_list(); //Loads in all the saved palettes from file.

            //Adds labels to variables
            Change[0] =lblCC1;
            Change[1] =lblCC2;
            Change[2] =lblCC3;
            Change[3] =lblCC4;
            Change[4] =lblCC5;
            Change[5] =lblCC6;

            Check_Skin();

            PBox.Visible = false; //Hides the box containing all the palette creation GUI
        }

        #region GUI
        //This regions deals with the GUI interface.
        //The square boxes appaearing next to labels are controlled here.

        private void Check_Skin()
        {
            if (Properties.Settings.Default.Skin == true)
            {
                //Firstly changing all the main labels on the form
                lblNew.ForeColor = Color.Black;
                lblSave.ForeColor = Color.Black;
                lblDefault.ForeColor = Color.Black;
                lblDelete.ForeColor = Color.Black;

                lblCC1.ForeColor = Color.Black;
                lblCC2.ForeColor = Color.Black;
                lblCC3.ForeColor = Color.Black;
                lblCC4.ForeColor = Color.Black;
                lblCC5.ForeColor = Color.Black;
                lblCC6.ForeColor = Color.Black;

                Pb1.BackColor = Color.Black;
                pb3.BackColor = Color.Black;
                pb4.BackColor = Color.Black;
                PB6.BackColor = Color.Black;

                lstPalette.BackColor = Color.White;
                lstPalette.ForeColor = Color.Black;
                PBox.ForeColor = Color.Black;

                lblTitle.ForeColor = Color.Black;

                lblAuthor.ForeColor = Color.Black;
                lblHelp.ForeColor = Color.Black;
                lblClose.ForeColor = Color.Black;

                pbLogo.Image = Properties.Resources.Logo__White;

                this.BackColor = Color.White;
            }
        }


        private void lblClose_Click(object sender, EventArgs e)
        {
            this.Close(); //Closing the main form 
        }

        private void LabelLeave(object sender, EventArgs e)
        {
            this.Pb1.Visible = false;
            this.pb3.Visible = false;
            this.pb4.Visible = false;
            this.PB6.Visible = false;
        }

        private void lblNew_MouseEnter(object sender, EventArgs e)
        {
            Pb1.Visible = true;
        }

        private void label1_MouseEnter(object sender, EventArgs e)
        {
            this.pb3.Visible = true;
        }

        private void lblDefault_MouseEnter(object sender, EventArgs e)
        {
            PB6.Visible = true;
        }

        private void lblSave_MouseEnter(object sender, EventArgs e)
        {
            pb4.Visible = true;
        }

        #endregion

        #endregion

        #region Palettes
        //Contains all the code required when doing the palette creation that isn't used in Form events

        #region Palette Selecting
        //The methods that are involved with loading in a platte to the creator

        private void lstPalette_SelectedIndexChanged(object sender, EventArgs e)
        {
            /*This deals with interpretting the text from the GUI
             * At the start, it makes sure that if nothing is selected in the listbox, there is a limited GUI on the screen.
             * This stops failed palette loading.
             * 
             * If it's not blank. it deals with loading either a default palette or a saved one. The appropriate GUI update calls are made
             * and an ID update is used for if and when they want to use the current palette.
            */
            if ((lstPalette.SelectedItem == "") || (lstPalette.SelectedItem == null)) { PBox.Visible = false; }
            else
            {

                PBox.Visible = true; //Displaying GUI as it might be needed
                string Item = lstPalette.SelectedItem.ToString(); //Getting the name of the palette

                //Basic Palettes
                if (Item == "Basic")
                {
                    Loadin("Basic");
                    Update(true);
                    ID = "DEFAULT_BASIC";
                }
                else if (Item == "Challenge")
                {
                    Loadin("Challenge");
                    Update(true);
                    ID = "DEFAULT_CHALLENGE";
                }
                else if (Item == "Firey")
                {
                    Loadin("Firey");
                    Update(true);
                    ID = "DEFAULT_FIREY";
                }
                else if (Item == "Cold")
                {
                    Loadin("Cold");
                    Update(true);
                    ID = "DEFAULT_COLD";
                }
                else if ((Item == "[Saved Palettes]") || (Item == "[Default Palettes]")) //An escape for some of the default text added to improve GUI
                {
                    PBox.Visible = false;
                }
                else
                {
                    Loadin(Item); //User Defined palettes
                    Update(false);
                }
            }
        }
        
        private void Loadin(string LPalette)
        {
            //This deals with the loading of the palettes onto the form.

            //Default palettes are just loaded from the class into the colours squares
            switch (LPalette)
            {
                case "Basic":
                    {
                        PBox.Text = "Basic";
                      PBC1.BackColor = Palette.Default[0].Colour.C1;
                      PBC2.BackColor = Palette.Default[0].Colour.C2;
                      PBC3.BackColor = Palette.Default[0].Colour.C3;
                      PBC4.BackColor = Palette.Default[0].Colour.C4;
                      PBC5.BackColor = Palette.Default[0].Colour.C5;
                      PBC6.BackColor = Palette.Default[0].Colour.C6;
                        break;
                    }

                case "Challenge":
                    {
                        PBox.Text = "Challenge";
                        PBC1.BackColor = Palette.Default[1].Colour.C1;
                        PBC2.BackColor = Palette.Default[1].Colour.C2;
                        PBC3.BackColor = Palette.Default[1].Colour.C3;
                        PBC4.BackColor = Palette.Default[1].Colour.C4;
                        PBC5.BackColor = Palette.Default[1].Colour.C5;
                        PBC6.BackColor = Palette.Default[1].Colour.C6;
                        break;
                    }
                case "Firey":
                    {
                        PBox.Text = "Firey";
                        PBC1.BackColor = Palette.Default[2].Colour.C1;
                        PBC2.BackColor = Palette.Default[2].Colour.C2;
                        PBC3.BackColor = Palette.Default[2].Colour.C3;
                        PBC4.BackColor = Palette.Default[2].Colour.C4;
                        PBC5.BackColor = Palette.Default[2].Colour.C5;
                        PBC6.BackColor = Palette.Default[2].Colour.C6;
                        break;
                    }
                case "Cold":
                        {
                            PBox.Text = "Cold";
                            PBC1.BackColor = Palette.Default[3].Colour.C1;
                            PBC2.BackColor = Palette.Default[3].Colour.C2;
                            PBC3.BackColor = Palette.Default[3].Colour.C3;
                            PBC4.BackColor = Palette.Default[3].Colour.C4;
                            PBC5.BackColor = Palette.Default[3].Colour.C5;
                            PBC6.BackColor = Palette.Default[3].Colour.C6;
                            break;
                        }
                default:
                    {
                        //When loading a user palette it's more difficult
                        ID = LPalette; //Gets the record number of the palette from file. This updates 'ID' as it needed when loading back in for the game
                         Current = Flow.Palettes.Load_Palette(Flow.Palettes.GetRecord(ID, true)); //Loads in the colours and name to the Current Variable

                        PBox.Text = Current.Name.ToString(); //Puts the name into the GUI, making usre it's in string format
                        PBC1.BackColor = Current.Colour.C1; //Adding colours to the GUI
                        PBC2.BackColor = Current.Colour.C2;
                        PBC3.BackColor = Current.Colour.C3;
                        PBC4.BackColor = Current.Colour.C4;
                        PBC5.BackColor = Current.Colour.C5;
                        PBC6.BackColor = Current.Colour.C6;
                    break;
                    }
            }
        }

        private void Update(bool IsDefault)
        {
            //Updates the GUI to stop Player's editting the default Palettes, saving them and renaming them
            short count = 0;

            if (IsDefault == true) //IsDefault is set to true if it's a default palette. 
            {
                lblDelete.Visible = false; //Hiding the Save and Delete functions, as you can't do this to a default palette
                lblSave.Visible = false;

                for (count = 0; count <= 5; count++)
                {
                    Change[count].Visible = false; //Making all the change lables hidden
                }
            }
            else //For a User palette
            {
                lblDelete.Visible = true; //Displaying the Save and Delete functions
                lblSave.Visible = true;

                for (count = 0; count <= 5; count++)
                {
                    Change[count].Visible = true; //Making all the change labels visible
                }
            }
        }

        #endregion

        #region Palette Operations
        //This region contains all the functions of a palette when it's being created

        private void lblDefault_Click(object sender, EventArgs e)
        {
            //Will allow the user to use the selected palettes in their games
                Properties.Settings.Default.Palette = ID; //Updates the settings of the Game
                System.Windows.Forms.MessageBox.Show("You'll now use this Palette!", "ColourFlow : Palette Changed"); //Displays a message to the user
                Properties.Settings.Default.Save();
        }

        private void lblSave_Click(object sender, EventArgs e)
        {
            //Will Save the palette to file
            Flow.Palettes.Save_Palette(Current);
            Add_list(); //Loads in the list to the screen and alerting user
            System.Windows.Forms.MessageBox.Show("Palette has been saved!", "ColourFlow: Palette Saved", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void lblDelete_Click(object sender, EventArgs e)
        {
            //Deletes a palette from the file
                FixName(Current.Name.Length, ref Current.Name); //Fixname adds leading spaces to name to make sure it's easily read from file

                if (Properties.Settings.Default.Palette == Current.Name) //Firslty checks if the user has selected to use the curent palette. Deletion would cause errors
                {
                    //Displays message to the user that they can't delete the palette
                    System.Windows.Forms.MessageBox.Show("You are using this palette!" + Environment.NewLine + "To delete: please choose to use another palette", "ColourFlow : Deletion Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
                else
                {
                    Flow.Palettes.DeleteRecord(Current.Name); //Deletes the palette from file
                    Add_list(); //Re-loads in all the names and updates the list of them
                    PBox.Visible = false; //Hide's the creation box
                }
        }
        
        private void lblNew_Click(object sender, EventArgs e)
        { 
            //Creates a new palette
            PBox.Visible = false; //Hides the creation box
            string Name = GetName(); //Get's the name from the user
            int Length = GetLength(Name); //Gets the length of the new name
           
            if (Length > 10) //Checks if the name is grater than 10 characters. The file system implimented only supports 10character names
            {
                //Displays a message to user to say there name is too long
                System.Windows.Forms.MessageBox.Show("Warning:\n Name too long. Please try a new name", "ColourFlow : Palette Name", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);   
            }
            else if (Length < 10) //if it is less than 10 a second check is done
            {
                FixName(Length, ref Name); //Fixname adds the leading psaces to the names so they can be read properly by file handling

                bool ISthere = Flow.Palettes.CheckName(Name); //Checks a if a name is already saved in the file same as the one the user wishes

                if (ISthere == true) //Is there is one another message is displayed
                {
                    System.Windows.Forms.MessageBox.Show("Warning:\n Palette with name already found. Please choose different name!", "ColourFlow : Palette Name", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
                else
                {
                    //Adds a default Colour to the scheme when it's created
                    Current.Colour.C1 = Color.White;
                    Current.Colour.C2 = Color.Red;
                    Current.Colour.C3 = Color.Blue;
                    Current.Colour.C4 = Color.Green;
                    Current.Colour.C5 = Color.Pink;
                    Current.Colour.C6 = Color.Orange;
                    //Adds default colours to the GUI
                    PBC1.BackColor = Color.White;
                    PBC2.BackColor = Color.Red;
                    PBC3.BackColor = Color.Blue;
                    PBC4.BackColor = Color.Green;
                    PBC5.BackColor = Color.Pink;
                    PBC6.BackColor = Color.Orange;

                    Flow.Palettes.Save_Palette(Current); //Saves the palette so the user at least has something
                    Add_list(); //Loads in the list again to show all the palettes the user has in file
                    Update(false); //Updates the GUI
                    PBox.Visible = true; //Displays the creation box
                }
            }
        } 

        #endregion 

        #region Palette Functions
        //Contains some of the validation mehods needed when creating palettes

        private string GetName()
        {
            //Gets the name from the user
            string Name = Interaction.InputBox("Please enter new Palette Name", "ColorFlow : New Palette"); //Gets name
            return Name;
        }

        private int GetLength(string name)
        {
            //Gets the returns the length of the name entered in
            int Length = name.Length;
            return Length;
        }

        private void FixName(int Length, ref string Name)
        {
            //Adds leading spaces to the end of the name so it can be read properly by file handling
            int left = 10 - Length; //Gets the number of spaces required
            short count = 1;
            for (count = 1; count <= left; count++)
            {
                Name += " "; //Adds the number of spaces to the name
            }
            Current.Name = Name; //Adds this to the GUI and local variable
            PBox.Text = Name;
        }

        private void Add_list()
        {
            //Loads all the names into file and displays them for the user
            short count = 0; //Used in counting
            string[] List = Flow.Palettes.Load_List(); //Get's a list of all the Palettes in file

                lstPalette.Items.Clear();

                //Adding the default palettes to the screen
                lstPalette.Items.Add("[Default Palettes]");
                lstPalette.Items.Add("Basic");
                lstPalette.Items.Add("Challenge");
                lstPalette.Items.Add("Firey");
                lstPalette.Items.Add("Cold");
                lstPalette.Items.Add("");
                lstPalette.Items.Add("[Saved Palettes]");

            if (List != null) //Checks for data in the list
            {
                int Length = List.Length - 1; //Get's the length of the new list

                   //Adding all the saved paletted in the file
                   for (count = 1; count <= Length; count++)
                   {
                        lstPalette.Items.Add(List[count]);
                   }

            }
        }

        private bool CheckColour(Color New, short Colour)
        {
            //Checks if there are 2 colours already in file
            bool Allowed = false; //Set to true of the colour is allowed
            short Matches = 0; //A counter for the number of matches (incremented if there are 2 colours the same)
            short count = 0; //Used in loop

            for (count = 1; count <= 6; count++) //Checks each colour to see if it matches the one picked. if a match is found, matches is incremented
            {
                switch (count)
                {
                    case 1: { if ((Current.Colour.C1.ToArgb() == New.ToArgb()) && (Colour != 1)) { Matches++; } break; }
                    case 2: { if ((Current.Colour.C2.ToArgb() == New.ToArgb()) && (Colour != 2)) { Matches++; } break; }
                    case 3: { if ((Current.Colour.C3.ToArgb() == New.ToArgb()) && (Colour != 3)) { Matches++; } break; }
                    case 4: { if ((Current.Colour.C4.ToArgb() == New.ToArgb()) && (Colour != 4)) { Matches++; } break; }
                    case 5: { if ((Current.Colour.C5.ToArgb() == New.ToArgb()) && (Colour != 5)) { Matches++; } break; }
                    case 6: { if ((Current.Colour.C6.ToArgb() == New.ToArgb()) && (Colour != 6)) { Matches++; } break; }
                }
            }

            if (Matches == 0) { Allowed = true; } //Makes sure there are no macthes

            return Allowed; //returns the value required
        }

        #endregion

        #region Colour Changing
        //Colour Changing Buttons

        //Each one is the same, but with different parametres
        private void lblCC6_Click(object sender, EventArgs e)
        {
            ColourDialog.Color = Current.Colour.C6; //Sets the default colour of  the dialog to the one already there
            ColourDialog.ShowDialog(); //Shows the dialog to user
            Color New = ColourDialog.Color; //Get's the new colour from dialog
            bool Allowed = CheckColour(New,6); //Checks if this is going to be allowed or not
            if (Allowed == true)
            { PBC6.BackColor = New; Current.Colour.C6 = New; Flow.Palettes.Save_Palette(Current); } //If allowed, updates the GUi with colour and saves colour
            else //If not ,then displays a warning
            { System.Windows.Forms.MessageBox.Show("No 2 colours can be the same. Please choose a new colour!", "ColourFlow : Colour Error"); }             
        }

        private void lblCC5_Click(object sender, EventArgs e)
        {
            ColourDialog.Color = Current.Colour.C5;
            ColourDialog.ShowDialog();
            Color New = ColourDialog.Color;
            bool Allowed = CheckColour(New,5);
            if (Allowed == true)
            { PBC5.BackColor = New; Current.Colour.C5 = New; Flow.Palettes.Save_Palette(Current); } 
            else
            { System.Windows.Forms.MessageBox.Show("No 2 colours can be the same. Please choose a new colour!", "ColourFlow : Colour Error"); }        
        }

        private void lblCC4_Click(object sender, EventArgs e)
        {
            ColourDialog.Color = Current.Colour.C4;
            ColourDialog.ShowDialog();
            Color New = ColourDialog.Color;
            bool Allowed = CheckColour(New,4);
            if (Allowed == true)
            { PBC4.BackColor = New; Current.Colour.C4 = New; Flow.Palettes.Save_Palette(Current); } 
            else
            { System.Windows.Forms.MessageBox.Show("No 2 colours can be the same. Please choose a new colour!", "ColourFlow : Colour Error"); }        
        }

        private void lblCC3_Click(object sender, EventArgs e)
        {
            ColourDialog.Color = Current.Colour.C3;
            ColourDialog.ShowDialog();
            Color New = ColourDialog.Color;
            bool Allowed = CheckColour(New,3);
            if (Allowed == true)
            { PBC3.BackColor = New; Current.Colour.C3 = New; Flow.Palettes.Save_Palette(Current); } 
            else
            { System.Windows.Forms.MessageBox.Show("No 2 colours can be the same. Please choose a new colour!", "ColourFlow : Colour Error"); }        
        }

        private void lblCC2_Click(object sender, EventArgs e)
        {
            ColourDialog.Color = Current.Colour.C2;
            ColourDialog.ShowDialog();
            Color New = ColourDialog.Color;
            bool Allowed = CheckColour(New,2);
            if (Allowed == true)
            { PBC2.BackColor = New; Current.Colour.C2 = New; Flow.Palettes.Save_Palette(Current); } 
            else
            { System.Windows.Forms.MessageBox.Show("No 2 colours can be the same. Please choose a new colour!", "ColourFlow : Colour Error"); }        
        }

        private void lblCC1_Click(object sender, EventArgs e)
        {
            ColourDialog.Color = Current.Colour.C1;
            ColourDialog.ShowDialog();
            Color New = ColourDialog.Color;
            bool Allowed = CheckColour(New,1);
            if (Allowed == true)
            { PBC1.BackColor = New; Current.Colour.C1 = New; Flow.Palettes.Save_Palette(Current); } 
            else
            { System.Windows.Forms.MessageBox.Show("No 2 colours can be the same. Please choose a new colour!", "ColourFlow : Colour Error"); }        
        }

        private void lblHelp_Click(object sender, EventArgs e)
        {
            Classes.Help Help = new Classes.Help(2);
        }

        #endregion

        #endregion
    } 
}